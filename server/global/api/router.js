const fs = require('fs');
const path = require('path');
const serialize = require('serialize-javascript');
const config = require('config');

// on dev the build path points to web/dist, on prod it points to web/build
const frontEndBuildPath = config.get('frontend.buildPath');
const frontEndBuildMode = config.get('frontend.buildMode');

let routeFilenames = [];

module.exports = (router, vite) => {
  // resource apis - appended automatically by CLI to the bottom of this file
  routeFilenames.forEach(filename => {
    console.log("loading api: " + filename);
    require('../../resources/' + filename)(router);
  });
  // catch all other api requests and send 404
  router.all('/api/*', (req, res) => {
    res.send(404);
  });

  // serve the react app index.html
  router.get('*', async (req, res) => {
    /**
     * SPA fallback - this is called for static mode, or otherwise when Vite is not serving the index
     */
    const url = req.originalUrl;
    const indexHtmlPath = path.resolve(`${frontEndBuildPath}/index.html`)
    fs.readFile(indexHtmlPath, 'utf8', async (err, indexHtml) => {
      // console.log("render debug 2", req.user)
      if(err) {
        console.error('Something went wrong:', err);
        return res.status(500).send('Something went wrong, try refreshing the page.');
      }
      const populatedIndexHtml = indexHtml.replace("'__CURRENT_USER__'", serialize(req.user || {}, { isJSON: true }));
      try {
        const renderedIndex = await vite.transformIndexHtml(url, populatedIndexHtml)
        res.status(200).set({ 'Content-Type': 'text/html' }).end(renderedIndex)

      } catch (e) {
        vite.ssrFixStacktrace(e)
        console.error(e)
        // todo yote error
        res.status(500).end(e.message)
      }

    })
  });
}

// New Yote resource API route names generated by the Yote CLI
routeFilenames.push('user/userApi');
routeFilenames.push('product/productApi');
routeFilenames.push('notification/notificationApi');